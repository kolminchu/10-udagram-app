service: 
  name: serverless-udagram-app-10

plugins:
  - serverless-webpack

custom:
  webpack:
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram api
        description: Serverless application for images sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-group-request.json)} 

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    CONNECTIONS_TABLE: Connections-sch-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-udagram-images-sch-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Scan
      - dynamodb:PutItem
      - dynamodb:GetItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:PutItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
  - Effect: Allow
    Action:
      - dynamodb:Query
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
  - Effect : Allow
    Action: 
      - s3:PutObject
      - s3:GetObject
    Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
  - Effect: Allow
    Action:
      - dynamodb:Scan
      - dynamodb:PutItem
      - dynamodb:DeleteItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self.provider.environment.CONNECTIONS_TABLE}

functions:
  GetGroups:
    handler: 'src/lambda/http/getGroups.handler'
    events:
      - http:
         path: 'groups'
         method: 'get'
         cors: true

  CreateGroup:
    handler: 'src/lambda/http/createGroup.handler'
    events:
      - http:
          path: 'groups'
          method: 'post'
          cors: true
          request:
            schema:
              application/json: ${file(models/create-group-request.json)}

  GetImages:
    handler: 'src/lambda/http/getImages.handler'
    events:
      - http:
          path: 'groups/{groupId}/images'
          method: 'get'
          cors: true

  CreateImage:
    handler: 'src/lambda/http/createImage.handler'
    events:
      - http:
          path: 'groups/{groupId}/images'
          method: 'post'
          cors: true

  GetImage:
    handler: 'src/lambda/http/getImage.handler'
    events:
      - http:
          path: images/{imageId}
          method: get
          cors: true

  SendUploadNotifications:
    handler: 'src/lambda/s3/sendNotification.handler'

  ConnectHandler:
    handler: 'src/lambda/websocket/connect.handler'
    events:
      - websocket:
          route: $connect
  
  DisconnectHandler:
    handler: 'src/lambda/websocket/disconnect.handler'
    events:
      - websocket:
          route: $disconnect
  
  SyncWithElasticSearch:
    handler: 'src/lambda/dynamodb/elasticSearchSync.handler'
    events:
      - stream: 
        type: dynamodb
        arn: !GetAtt ImagesDynamoDBTable:StreamArn 


resources:
  Resources:

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    ImagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName : imageId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.IMAGES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName : ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            Projection:
                ProjectionType: ALL

    AttachmentsBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
          NotificationConfiguration:
            LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt SendUploadNotificationsLambdaFunction.Arn
          CorsConfiguration:
            CorsRules:
              - 
                AllowedOrigins:
                  - '*'
                AllowedHeaders:
                  - '*'
                AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - HEAD
                MaxAge: 3000 

    SendUploadNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendUploadNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}


    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket